name: CI

on: [push]

jobs:
  test:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'
          cache: true
          
      - name: Install linters
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          go install golang.org/x/lint/golint@latest
          
      - name: Run tests
        shell: bash
        run: |
          set -e
          go mod tidy
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
          echo "Running vet..."
          go vet ./...
          echo "Running golint (non-fatal)..."
          ~/go/bin/golint ./... || echo "‚ö†Ô∏è Lint issues found (not failing build)"
          echo "Running staticcheck..."
          ~/go/bin/staticcheck ./...
          
          # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
          echo "Running tests with coverage..."
          for pkg in $(go list ./...); do
            mkdir -p "coverage/${pkg#*/}"
            go test -v -coverprofile="coverage/${pkg#*/}/coverage.out" -covermode=atomic "$pkg"
          done
          
          # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
          echo "mode: atomic" > full-coverage.out
          find coverage -name "coverage.out" -exec grep -h -v "^mode:" {} >> full-coverage.out \;
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
          COVERAGE=$(go tool cover -func=full-coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "üìä Coverage: $COVERAGE%"
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "::warning::Coverage is below 80% ($COVERAGE%)"
          fi

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            full-coverage.out
            coverage/

  docker-build-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/todo-app-go:latest

