package manager

import (
	"context"
	"crypto/rand"
	"encoding/hex"
	"fmt"
	"sync"
	"time"

	"todo-app/internal/logger"
)

type UserManager struct {
	mu      sync.Mutex
	storage Storage
	users   map[int]*User // üÜï –î–æ–±–∞–≤–ª—è–µ–º in-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	nextID  int           // üÜï –°—á–µ—Ç—á–∏–∫ –¥–ª—è in-memory —Ä–µ–∂–∏–º–∞
}

func NewUserManager(storage Storage) *UserManager {
	return &UserManager{
		storage: storage,
		users:   make(map[int]*User), // üÜï –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
		nextID:  1,                   // üÜï –ù–∞—á–∏–Ω–∞–µ–º —Å 1
	}
}

// GenerateDeviceID —Å–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
func (um *UserManager) GenerateDeviceID() string {
	bytes := make([]byte, 16)
	rand.Read(bytes)
	return hex.EncodeToString(bytes)
}

// CreateUser —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (um *UserManager) CreateUser(deviceID string, telegramID int64) (*User, error) {
	um.mu.Lock()
	defer um.mu.Unlock()

	user := &User{
		DeviceID:   deviceID,
		TelegramID: telegramID,
		CreatedAt:  time.Now(),
		UpdatedAt:  time.Now(),
	}

	// üÜï –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	if um.storage != nil {
		id, err := um.storage.CreateUser(user)
		if err != nil {
			return nil, err
		}
		user.ID = id
		logger.Info(context.Background(), "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ", "userID", id, "deviceID", deviceID)
		return user, nil
	}

	// In-memory –ª–æ–≥–∏–∫–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
	user.ID = um.nextID
	um.users[user.ID] = user
	um.nextID++
	logger.Info(context.Background(), "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–º—è—Ç–∏", "userID", user.ID, "deviceID", deviceID)
	return user, nil
}

// GetUserByDeviceID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ device_id
func (um *UserManager) GetUserByDeviceID(deviceID string) (*User, error) {
	um.mu.Lock()
	defer um.mu.Unlock()

	if um.storage != nil {
		return um.storage.GetUserByDeviceID(deviceID)
	}

	// In-memory –ø–æ–∏—Å–∫
	for _, user := range um.users {
		if user.DeviceID == deviceID {
			return user, nil
		}
	}
	return nil, fmt.Errorf("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
}

// UpdateUser –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (um *UserManager) UpdateUser(user *User) error {
	um.mu.Lock()
	defer um.mu.Unlock()

	if um.storage != nil {
		return um.storage.UpdateUser(user)
	}

	// In-memory –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
	if _, exists := um.users[user.ID]; !exists {
		return fmt.Errorf("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	user.UpdatedAt = time.Now()
	um.users[user.ID] = user
	return nil
}

// GetUserByID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID (–Ω–æ–≤—ã–π –º–µ—Ç–æ–¥)
func (um *UserManager) GetUserByID(userID int) (*User, error) {
	um.mu.Lock()
	defer um.mu.Unlock()

	if um.storage != nil {
		return um.storage.GetUserByID(userID)
	}

	// In-memory –ø–æ–∏—Å–∫
	if user, exists := um.users[userID]; exists {
		return user, nil
	}
	return nil, fmt.Errorf("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
}

// GetOrCreateUserByTelegramID - –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
func (um *UserManager) GetOrCreateUserByTelegramID(telegramID int64) (*User, error) {
	um.mu.Lock()
	defer um.mu.Unlock()

	if um.storage != nil {
		// –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		user, err := um.storage.GetUserByTelegramID(telegramID)
		if err == nil {
			return user, nil
		}
		
		// –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
		deviceID := fmt.Sprintf("telegram_%d", telegramID)
		user = &User{
			DeviceID:   deviceID,
			TelegramID: telegramID,
			CreatedAt:  time.Now(),
			UpdatedAt:  time.Now(),
		}
		
		id, err := um.storage.CreateUser(user)
		if err != nil {
			return nil, err
		}
		user.ID = id
		logger.Info(context.Background(), "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –ø–æ Telegram ID", "userID", id, "telegramID", telegramID)
		return user, nil
	}

	// In-memory –ª–æ–≥–∏–∫–∞
	for _, user := range um.users {
		if user.TelegramID == telegramID {
			return user, nil
		}
	}
	
	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	deviceID := fmt.Sprintf("telegram_%d", telegramID)
	user := &User{
		ID:         um.nextID,
		DeviceID:   deviceID,
		TelegramID: telegramID,
		CreatedAt:  time.Now(),
		UpdatedAt:  time.Now(),
	}
	um.users[user.ID] = user
	um.nextID++
	
	logger.Info(context.Background(), "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–º—è—Ç–∏ –ø–æ Telegram ID", "userID", user.ID, "telegramID", telegramID)
	return user, nil
}

// GetUserByTelegramID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
func (um *UserManager) GetUserByTelegramID(telegramID int64) (*User, error) {
	um.mu.Lock()
	defer um.mu.Unlock()

	if um.storage != nil {
		return um.storage.GetUserByTelegramID(telegramID)
	}

	// In-memory –ø–æ–∏—Å–∫
	for _, user := range um.users {
		if user.TelegramID == telegramID {
			return user, nil
		}
	}
	return nil, fmt.Errorf("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
}