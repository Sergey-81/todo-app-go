package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	//"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"todo-app/internal/logger"
	"todo-app/internal/manager"
	"todo-app/internal/storage"
)

type Bot struct {
	api         *tgbotapi.BotAPI
	taskManager *manager.TaskManager
	storage     manager.Storage
	userManager *manager.UserManager
}

func NewBot(token string, tm *manager.TaskManager, storage manager.Storage, um *manager.UserManager) (*Bot, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: %v", err)
	}

	bot.Debug = true
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	return &Bot{
		api:         bot,
		taskManager: tm,
		storage:     storage,
		userManager: um,
	}, nil
}

func (b *Bot) Start() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates, err := b.api.GetUpdatesChan(u)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è updates: %v", err)
	}

	log.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")

	for update := range updates {
		if update.Message == nil {
			continue
		}

		go b.handleMessage(update.Message)
	}
}

func (b *Bot) handleMessage(msg *tgbotapi.Message) {
	ctx := context.Background()
	
	logger.Info(ctx, "–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ", 
		"user", msg.From.UserName, 
		"text", msg.Text,
	)

	if msg.IsCommand() {
		b.handleCommand(msg)
		return
	}

	b.handleTextMessage(msg)
}

func (b *Bot) handleCommand(msg *tgbotapi.Message) {
	switch msg.Command() {
	case "start":
		b.handleStartCommand(msg)
	case "add":
		b.addTask(msg)
	case "list":
		b.handleListCommand(msg)
	case "done":
		b.completeTask(msg)
	case "delete":
		b.deleteTask(msg)
	case "help":
		b.sendHelp(msg.Chat.ID)
	default:
		b.sendMessage(msg.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
	}
}

func (b *Bot) handleTextMessage(msg *tgbotapi.Message) {
	if strings.TrimSpace(msg.Text) != "" {
		b.addTaskFromText(msg.Chat.ID, msg.From.ID, msg.Text)
	}
}

func (b *Bot) handleStartCommand(msg *tgbotapi.Message) {
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    _, err := b.userManager.GetOrCreateUserByTelegramID(int64(msg.From.ID))
    if err != nil {
        b.sendMessage(msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + err.Error())
        return
    }

	text := `üéØ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TodoBot!*

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/add [–∑–∞–¥–∞—á–∞] - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏  
/done [–Ω–æ–º–µ—Ä] - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
/delete [–Ω–æ–º–µ—Ä] - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
/help - –ü–æ–º–æ—â—å

*–ü—Ä–∏–º–µ—Ä—ã:*
/add –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ #–ø–æ–∫—É–ø–∫–∏
/add –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –¥–æ –ø—è—Ç–Ω–∏—Ü—ã üöÄ
/done 1`

	b.sendMessage(msg.Chat.ID, text)
}

func (b *Bot) handleListCommand(msg *tgbotapi.Message) {
    // –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º default –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    defaultUser, err := b.userManager.GetUserByDeviceID("default_legacy_user")
    if err != nil {
        b.sendMessage(msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        return
    }

    tasks, err := b.taskManager.GetAllTasksForUser(defaultUser.ID)
    if err != nil {
        b.sendMessage(msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á: "+err.Error())
        return
    }

    if len(tasks) == 0 {
        b.sendMessage(msg.Chat.ID, "üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç")
        return
    }

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
	var response strings.Builder
	response.WriteString("üìã *–í–∞—à–∏ –∑–∞–¥–∞—á–∏:*\n\n")
	
	for i, task := range tasks {
		status := "‚ùå"
		if task.Completed {
			status = "‚úÖ"
		}
		
		priorityEmoji := "‚ö™"
		switch task.Priority {
		case manager.PriorityLow:
			priorityEmoji = "üîµ"
		case manager.PriorityMedium:
			priorityEmoji = "üü°"
		case manager.PriorityHigh:
			priorityEmoji = "üî¥"
		}

		response.WriteString(fmt.Sprintf("%d. %s%s %s", i+1, status, priorityEmoji, task.Description))

		if len(task.Tags) > 0 {
			response.WriteString(fmt.Sprintf(" \\#%s", strings.Join(task.Tags, " \\#")))
		}

		if !task.DueDate.IsZero() {
			response.WriteString(fmt.Sprintf("\n   üìÖ %s", task.DueDate.Format("02.01.2006")))
		}

		response.WriteString("\n\n")
	}

	b.sendMessage(msg.Chat.ID, response.String())
}

func (b *Bot) addTask(msg *tgbotapi.Message) {
	args := msg.CommandArguments()
	if args == "" {
		b.sendMessage(msg.Chat.ID, "–£–∫–∞–∂–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: /add –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ")
		return
	}

	b.addTaskFromText(msg.Chat.ID, msg.From.ID, args)
}

func (b *Bot) addTaskFromText(chatID int64, userID int, text string) {
    // –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º default –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    defaultUser, err := b.userManager.GetUserByDeviceID("default_legacy_user")
    if err != nil {
        // –ï—Å–ª–∏ default –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        defaultUser, err = b.userManager.CreateUser("default_legacy_user", 0)
        if err != nil {
            b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "+err.Error())
            return
        }
    }

    var tags []string
    description := text
    
    // –ü–∞—Ä—Å–∏–º —Ç–µ–≥–∏
    if strings.Contains(description, "#") {
        words := strings.Fields(description)
        for _, word := range words {
            if strings.HasPrefix(word, "#") {
                tags = append(tags, strings.TrimPrefix(word, "#"))
            }
        }
        description = strings.TrimSpace(strings.ReplaceAll(description, "#", ""))
        for _, tag := range tags {
            description = strings.ReplaceAll(description, tag, "")
        }
        description = strings.TrimSpace(description)
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è default –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    taskID, err := b.taskManager.AddTaskForUser(defaultUser.ID, description, tags)
    if err != nil {
        b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞: "+err.Error())
        return
    }

    response := fmt.Sprintf("‚úÖ *–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*\n\nID: #%d\n–ó–∞–¥–∞—á–∞: %s", taskID, description)
    if len(tags) > 0 {
        response += fmt.Sprintf("\n–¢–µ–≥–∏: %s", strings.Join(tags, ", "))
    }

    b.sendMessage(chatID, response)
}

func (b *Bot) completeTask(msg *tgbotapi.Message) {
	args := msg.CommandArguments()
	if args == "" {
		b.sendMessage(msg.Chat.ID, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏: /done 1")
		return
	}

	taskID, err := strconv.Atoi(args)
	if err != nil {
		b.sendMessage(msg.Chat.ID, "–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
		return
	}

	_, err = b.taskManager.ToggleComplete(taskID)
	if err != nil {
		b.sendMessage(msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: "+err.Error())
		return
	}

	b.sendMessage(msg.Chat.ID, fmt.Sprintf("‚úÖ –ó–∞–¥–∞—á–∞ #%d –æ—Ç–º–µ—á–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π!", taskID))
}

func (b *Bot) deleteTask(msg *tgbotapi.Message) {
	args := msg.CommandArguments()
	if args == "" {
		b.sendMessage(msg.Chat.ID, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏: /delete 1")
		return
	}

	taskID, err := strconv.Atoi(args)
	if err != nil {
		b.sendMessage(msg.Chat.ID, "–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
		return
	}

	err = b.taskManager.DeleteTask(taskID)
	if err != nil {
		b.sendMessage(msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: "+err.Error())
		return
	}

	b.sendMessage(msg.Chat.ID, fmt.Sprintf("üóëÔ∏è –ó–∞–¥–∞—á–∞ #%d —É–¥–∞–ª–µ–Ω–∞!", taskID))
}

func (b *Bot) sendHelp(chatID int64) {
	helpText := `ü§ñ *–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*

*/start* - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
*/add [–∑–∞–¥–∞—á–∞]* - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
*/list* - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
*/done [–Ω–æ–º–µ—Ä]* - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π  
*/delete [–Ω–æ–º–µ—Ä]* - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
*/help* - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

*–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*
/add –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ #–ø–æ–∫—É–ø–∫–∏
/add –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç –¥–æ –ø—è—Ç–Ω–∏—Ü—ã üöÄ
/done 1
/list`

	b.sendMessage(chatID, helpText)
}

func (b *Bot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	
	_, err := b.api.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func main() {
	ctx := context.Background()
	logger.SetLevel(logger.LevelInfo)
	logger.Info(ctx, "–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")

	if err := os.MkdirAll("data", 0755); err != nil {
		logger.Error(ctx, err, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data")
		return
	}

	dbStorage, err := storage.NewSQLiteStorage("./data/todoapp.db")
	if err != nil {
		logger.Error(ctx, err, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLite —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
		return
	}
	defer dbStorage.Close()

	logger.Info(ctx, "SQLite —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

	taskManager := manager.NewTaskManagerWithStorage(dbStorage)
	userManager := manager.NewUserManager(dbStorage)

	// –¢–æ–∫–µ–Ω –±–æ—Ç–∞
	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	if botToken == "" {
		botToken = "MY_TELEGRAM_TOKEN" // fallback
	}

	bot, err := NewBot(botToken, taskManager, dbStorage, userManager)
	if err != nil {
		logger.Error(ctx, err, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞")
		return
	}

	logger.Info(ctx, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
	bot.Start()
}